name: PR Checks

on:
  pull_request:
    branches: ['**']
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      started-at: ${{ steps.timestamp.outputs.TIMESTAMP }}

    steps:
      - name: Output Timestamp
        id: timestamp
        run: echo "TIMESTAMP=$(date -Iseconds)" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build
        run: yarn build

      - name: Run tests
        run: yarn test
        env:
          CI: true

      - name: Run linting
        run: yarn lint

  validate-typescript:
    name: TypeScript Validation
    runs-on: ubuntu-latest
    needs: [build-and-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: TypeScript Check
        run: yarn tsc --noEmit

  analyze-dependencies:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    needs: [build-and-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Check for vulnerabilities
        run: yarn audit
        continue-on-error: true # Don't fail the build on vulnerabilities, just report them

  test-github-action:
    name: Test GitHub Action
    runs-on: ubuntu-latest
    needs: [build-and-test]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build the action
        run: yarn build

      - name: Test action on popular repositories
        id: test-action
        uses: ./
        with:
          repository: 'facebook/react'
          output-file: 'react-analysis.md'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify action output
        run: |
          if [ ! -f "react-analysis.md" ]; then
            echo "Error: Output file was not created"
            exit 1
          fi

          if [ ! -s "react-analysis.md" ]; then
            echo "Error: Output file is empty"
            exit 1
          fi

          echo "GitHub Action successfully analyzed repository and generated report"

          # Check that the action outputs contain expected values
          if [ -z "${{ steps.test-action.outputs.risk-score }}" ]; then
            echo "Error: Missing risk-score output"
            exit 1
          fi

          if [ -z "${{ steps.test-action.outputs.risk-rating }}" ]; then
            echo "Error: Missing risk-rating output"
            exit 1
          fi

          echo "GitHub Action outputs verified successfully"

      - name: Upload analysis artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-action-test-results
          path: react-analysis.md
          retention-days: 7

  comment-pr-status:
    name: Comment PR Status
    runs-on: ubuntu-latest
    needs: [build-and-test, validate-typescript, analyze-dependencies, test-github-action]
    if: always() # Run even if previous jobs have failed

    # Explicitly set permissions for this job
    permissions:
      checks: write
      pull-requests: write
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Add step to create GitHub App token
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.PUBLISHER_APP_ID }}
          private-key: ${{ secrets.PUBLISHER_CERT }}
          owner: ${{ github.repository_owner }}
          repositories: |
            git-assure
          permission-checks: write

      - name: Generate PR Comment
        id: pr-comment
        uses: actions/github-script@v6
        env:
          BUILD_STATUS: ${{ needs.build-and-test.result }}
          TS_STATUS: ${{ needs.validate-typescript.result }}
          DEP_STATUS: ${{ needs.analyze-dependencies.result }}
          ACTION_STATUS: ${{ needs.test-github-action.result }}
          STARTED_AT: ${{ needs.build-and-test.outputs.started-at }}
        with:
          # Use the GitHub App token instead of GITHUB_TOKEN
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const buildStatus = process.env.BUILD_STATUS;
            const tsStatus = process.env.TS_STATUS;
            const depStatus = process.env.DEP_STATUS;
            const actionStatus = process.env.ACTION_STATUS;
            const startedAt = process.env.STARTED_AT;
            const endedAt = new Date().toISOString();

            console.log(`Checks Started at: ${new Date(startedAt).toLocaleString()}`);
            console.log(`Checks Ended at: ${new Date(endedAt).toLocaleString()}`);

            function getStatusEmoji(status) {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⚠️';
                case 'skipped': return '⏭️';
                case 'neutral': return '⚪';
                default: return '⚠️';
              }
            }

            const statusTable = `
            | Check | Status |
            | ----- | ------ |
            | Build and Test | ${getStatusEmoji(buildStatus)} |
            | TypeScript Validation | ${getStatusEmoji(tsStatus)} |
            | Dependency Analysis | ${getStatusEmoji(depStatus)} |
            | GitHub Action Test | ${getStatusEmoji(actionStatus)} |
            `;

            const allPassed = buildStatus === 'success' && tsStatus === 'success' && actionStatus === 'success';
            const anyFailed = buildStatus === 'failure' || tsStatus === 'failure' || depStatus === 'failure' || actionStatus === 'failure';

            const conclusion = allPassed 
              ? '✨ All required checks have passed!' 
              : '⚠️ Some checks have failed or may have been skipped. Please review the issues above.';

            const comment = `## PR Check Results

            ${statusTable}

            ${conclusion}

            *Automated comment from GitHub Actions*
            `;

            try {
              // Create a check run for the PR
              await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'GitAssure PR Checks',
                head_sha: context.payload.pull_request.head.sha,
                status: 'completed',
                conclusion: anyFailed ? 'failure' : 'success',
                completed_at: endedAt,
                started_at: startedAt || new Date(Date.now() - 60000).toISOString(),
                output: {
                  title: 'PR Checks Summary',
                  summary: conclusion,
                  text: statusTable
                }
              });
              console.log('Successfully created check run with GitHub App token');
            } catch (error) {
              console.error('Error creating check run:');
              console.error(`Status: ${error.status}`);
              console.error(`Message: ${error.message}`);
              if (error.response) {
                console.error('Response data:', JSON.stringify(error.response.data));
              }
            }

            // Post the comment on the PR
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
