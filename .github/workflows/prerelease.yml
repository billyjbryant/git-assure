name: Pre-release

on:
  pull_request:
    types: [labeled]
    branches:
      - main

jobs:
  test:
    name: Test & Lint
    # Only run this workflow when the 'prerelease' label is added
    if: contains(github.event.label.name, 'prerelease')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run tests
        run: yarn test
        env:
          CI: true

      - name: Run lint
        run: yarn lint
        env:
          CI: true
          NODE_ENV: production
      - name: Run TypeScript check
        run: yarn tsc --noEmit
        env:
          CI: true
          NODE_ENV: production
      - name: Run dependency analysis
        run: yarn audit --groups dependencies --production
        env:
          CI: true
          NODE_ENV: production
      - name: Run security audit
        run: yarn audit --groups devDependencies --production
        env:
          CI: true
          NODE_ENV: production

  prerelease:
    name: GitAssure Pre-release
    if: contains(github.event.label.name, 'prerelease')
    runs-on: ubuntu-latest
    environment: prerelease-approval
    permissions:
      contents: write
      pull-requests: write
      issues: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          persist-credentials: true

      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.PUBLISHER_APP_ID }}
          private-key: ${{ secrets.PUBLISHER_CERT }}
          owner: ${{ github.repository_owner }}

      - name: Retrieve GitHub App User ID
        id: get-user-id
        run: |
          userid=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)
          echo "user-id=${userid}"
          echo "user-id=${userid}" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run tests
        run: yarn test
        env:
          CI: true

      - name: Run lint
        run: yarn lint
        env:
          CI: true

      - name: Build package
        run: yarn build

      - name: Verify dist directory exists
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found. Build may have failed."
            exit 1
          fi

          if [ ! -f "dist/src/cli.js" ]; then
            echo "Error: CLI module not found in dist. Build may be incomplete."
            exit 1
          fi

          echo "Build artifacts verified successfully."

      - name: Extract branch info
        id: branch_info
        uses: actions/github-script@v6
        with:
          script: |
            // Get sanitized branch name
            const branchName = context.payload.pull_request.head.ref.replace(/\//g, '-');
            console.log(`Branch name: ${branchName}`);

            // Set outputs
            core.setOutput('branch_name', branchName);
            core.exportVariable('BRANCH_NAME', branchName);

      # The wait for approval step is now handled by the environment configuration

      - name: Create custom pre-release
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          BRANCH_NAME: ${{ steps.branch_info.outputs.branch_name }}
        run: |
          # Configure git for the release process
          git config --global user.name 'Publisher Bot'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

          # Make sure build artifacts are included in the release
          echo "Ensuring build artifacts are included..."
          if [ ! -d "dist" ]; then
            echo "Running build again to ensure dist directory exists..."
            yarn build
          fi

          # Use semantic-release for the prerelease with custom prerelease ID
          # First create an empty commit to ensure semantic-release detects a change
          git commit --allow-empty -m "feat: Force prerelease version bump via workflow"

          npx semantic-release --dry-run --no-ci --preset angular \
            --branches ${{ github.head_ref }} \
            --prerelease "pre-${BRANCH_NAME}" \
            --plugins @semantic-release/commit-analyzer,@semantic-release/release-notes-generator,@semantic-release/changelog,@semantic-release/npm,@semantic-release/git,@semantic-release/github

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const fs = require('fs');
            try {
              if (fs.existsSync('./package.json')) {
                const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
                const version = pkg.version;
                const branchName = process.env.BRANCH_NAME;
                
                // Check if dist directory was properly built and included
                const distExists = fs.existsSync('./dist');
                const cliExists = fs.existsSync('./dist/src/cli.js');
                
                const buildStatus = distExists && cliExists 
                  ? '‚úÖ Build artifacts verified' 
                  : '‚ö†Ô∏è Some build artifacts may be missing';
                
                github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `üöÄ Pre-release version **${version}** has been created for branch \`${branchName}\`.
                  
                    ${buildStatus}

                    This is a test release and won't update the main version of the package.`
                                    });
                                  } else {
                                    github.rest.issues.createComment({
                                      owner: context.repo.owner,
                                      repo: context.repo.repo,
                                      issue_number: context.issue.number,
                                      body: `‚ö†Ô∏è Could not determine pre-release version. Please check the workflow logs.`
                                    });
                                  }
                                } catch (error) {
                                  console.error('Error commenting on PR:', error);
                                }
